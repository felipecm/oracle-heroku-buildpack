#!/usr/bin/env ruby

require 'yaml'

$stdout.sync = true

def indent(msg)
  puts "       #{msg}"
end

BUILD_DIR=ARGV[0]
ENV_DIR=ARGV[2]

puts "-----> Found an .oracle.yml"
puts `apt-get install alien`

ORACLE_CONFIG = YAML.load_file("#{BUILD_DIR}/.oracle.yml")

ORACLE_INSTANT_CLIENT_DIR="vendor/oracle_instantclient"
ORACLE_INSTANT_CLIENT_URL="https://www.dropbox.com/s/dff8nh85a8d1kv4/oracle-instantclient12.1-basic-12.1.0.2.0-1.x86_64.rpm?dl=0"
ORACLE_INSTANT_CLIENT_DEV_URL="https://www.dropbox.com/s/0tpw7cs39i892xf/oracle-instantclient12.1-devel-12.1.0.2.0-1.x86_64.rpm?dl=0"

ORACLE_INSTANT_CLIENT_FILENAME=ORACLE_INSTANT_CLIENT_URL.split(/\//).last
ORACLE_INSTANT_CLIENT_FILENAME=ORACLE_INSTANT_CLIENT_FILENAME.split(/\?/).first
ORACLE_INSTANT_CLIENT_DEV_FILENAME=ORACLE_INSTANT_CLIENT_DEV_URL.split(/\//).last
ORACLE_INSTANT_CLIENT_DEV_FILENAME=ORACLE_INSTANT_CLIENT_DEV_FILENAME.split(/\?/).first

indent "Making directory #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}"
`mkdir -p #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}`

indent "Downloading and extracting #{ORACLE_INSTANT_CLIENT_FILENAME}"
result = `wget -O #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}/#{ORACLE_INSTANT_CLIENT_FILENAME} #{ORACLE_INSTANT_CLIENT_URL}`
result = `alien`

unless $?.success?
  indent "Failure while downloading Oracle instant client archive: #{$?}"
  exit 1
end

indent "Successfully extracted #{ORACLE_INSTANT_CLIENT_FILENAME}"

ORACLE_NETWORK_ADMIN_DIR = "#{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}/network/admin"
`mkdir -p #{ORACLE_NETWORK_ADMIN_DIR}`

if ORACLE_CONFIG
  TNSNAMES_FILENAME = ORACLE_CONFIG["tnsnames.ora"]
  if File.exists?(File.join(BUILD_DIR,TNSNAMES_FILENAME))
    indent "Symlinking #{TNSNAMES_FILENAME} to #{ORACLE_INSTANT_CLIENT_DIR}/network/admin/tnsnames.ora"
    `ln -sf #{File.join('/app',TNSNAMES_FILENAME)} #{ORACLE_NETWORK_ADMIN_DIR}/tnsnames.ora`
  end

  SQLNET_FILENAME = ORACLE_CONFIG["sqlnet.ora"]
  if File.exists?(File.join(BUILD_DIR,SQLNET_FILENAME))
    indent "Symlinking #{SQLNET_FILENAME} to #{ORACLE_INSTANT_CLIENT_DIR}/network/admin/sqlnet.ora"
    `ln -sf #{File.join('/app',SQLNET_FILENAME)} #{ORACLE_NETWORK_ADMIN_DIR}/sqlnet.ora`
  end
end

indent "Create profile.d script"
`mkdir -p #{BUILD_DIR}/.profile.d`

open("#{BUILD_DIR}/.profile.d/oracle.sh", "w") do |f|
  ORACLE_HOME = "/app/#{ORACLE_INSTANT_CLIENT_DIR}"
  f.puts "export ORACLE_HOME=#{ORACLE_HOME}"
  f.puts "export LD_LIBRARY_PATH=#{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}:$LD_LIBRARY_PATH"
  f.puts "export PATH=#{ORACLE_HOME}:$PATH"
  f.puts "export TNS_ADMIN=#{ORACLE_HOME}/network/admin"
  f.puts "export OCI_LIB_DIR=#{ORACLE_HOME}"
  f.puts "export OCI_INC_DIR=#{ORACLE_HOME}/sdk/include"
  puts `Directory from script #{ORACLE_HOME}`
  puts `ls -la #{ORACLE_HOME}`
end

indent "Save build LD_LIBRARY_PATH to ENV_DIR"

puts `Directory from buildpack #{ORACLE_HOME}`
puts `ls -la #{ORACLE_HOME}`

if ENV_DIR
  LD_LIBRARY_PATH_FILE = File.join(ENV_DIR, 'LD_LIBRARY_PATH')
  existing_ld_library_path = `cat #{LD_LIBRARY_PATH_FILE}`  if File.exists?(LD_LIBRARY_PATH_FILE)

  open(File.join(ENV_DIR,'LD_LIBRARY_PATH'), 'w') do |f|
    value = "#{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}"
    unless existing_ld_library_path.nil? || existing_ld_library_path.trim.empty?
      value += ":#{existing_ld_library_path}"
    end
    f.puts value
  end
end

indent "Done!"
